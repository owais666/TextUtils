{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","React","createElement","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","Fragment","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","onClick","toggleMode","htmlFor","TextForm","text","setText","useState","style","color","heading","value","onChange","event","target","backgroundColor","rows","handleUpClick","newText","showAlert","handleLoClick","handleCapitalize","split","map","el","join","speak","SpeechSynthesisUtterance","window","speechSynthesis","handleCopy","document","getElementById","select","navigator","clipboard","writeText","clearbtn","length","defaultProps","App","setMode","setAlert","body","message","setTimeout","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.4f77e432.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert && \r\n    <div>\r\n      <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n  </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// import App from '../App';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"/\">{props.aboutText}</a>\r\n        </li>\r\n      </ul>\r\n      {/* <form className=\"d-flex\" role=\"search\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n     \r\n    </div>\r\n<div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n        <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode} />\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n        </div>\r\n  </div>\r\n</nav>\r\n</>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title:PropTypes.string.isRequired,\r\n    aboutText:PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"Set the title\",\r\n    aboutText:\"About Us\"\r\n}\r\n","import React, {useState} from 'react'\r\n \r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n  const handleUpClick = ()=>{\r\n   // console.log(\"Uppercase was clicked\");\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Upper Case\",\"success\");\r\n  }\r\n\r\n  const handleLoClick = ()=>{\r\n    // console.log(\"Uppercase was clicked\");\r\n     let newText = text.toLowerCase();\r\n     setText(newText);\r\n     props.showAlert(\"Converted to Lower Case\",\"success\");\r\n   }\r\n\r\nconst handleOnchange = (event) =>{\r\n  setText(event.target.value);\r\n // console.log(\"hekki\");\r\n}\r\n\r\n\r\n// @geekymaster2016\r\n// I had added the speak functionality in the TextUtilities app and function is:\r\nconst speak = () => {\r\n  let msg = new SpeechSynthesisUtterance();\r\n  msg.text = text;\r\n  window.speechSynthesis.speak(msg);\r\n  props.showAlert(\"Voice has been Generated\",\"success\");\r\n}\r\n\r\n//To capitalize the text\r\nconst handleCapitalize = () => {\r\n  let newText =text.toLowerCase();\r\n  newText = newText.split(\" \").map(el => el.charAt(0).toUpperCase() + el.slice(1)).join(\" \");\r\n  setText(newText);\r\n  props.showAlert(\"Converted to Capitalize\",\"success\");\r\n}\r\n\r\n//To Copy Text to clipboard\r\nconst handleCopy= ()=>{\r\n  var text = document.getElementById(\"myBox\");\r\n  text.select();\r\n  navigator.clipboard.writeText(text.value);\r\n  props.showAlert(\"Copied to Clipboard\",\"success\");\r\n}\r\n\r\n//To clear the text \r\nconst clearbtn =()=>{\r\n  setText(\"\");\r\n  props.showAlert(\"Text has been Cleared\",\"success\");\r\n}\r\n\r\n// //to count words\r\n// const words = ()=>{\r\n  \r\n// }\r\n  // Created a State for manipulating the text\r\n  const [text,setText] = useState('');\r\n  return (\r\n    <>\r\n    <div className='container' style={{color: props.mode==='dark'?'white':'black'}}>\r\n        <h2>{props.heading}</h2>\r\n        <div className=\"mb-3\">\r\n            <textarea className=\"form-control\"  value ={text} onChange={handleOnchange} style={{backgroundColor: props.mode==='light'?'white':'grey', color: props.mode==='dark'?'white':'black'}} id=\"myBox\" rows=\"10\"></textarea>\r\n        </div>\r\n      <button className=\"btn btn-success mx-2 my-1\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n      <button className=\"btn btn-success mx-2 my-1\" onClick={handleLoClick}>Convert to LowerCase</button>\r\n      <button className=\"btn btn-success mx-2 my-1\" onClick={handleCapitalize}>Convert to Capitalize</button>\r\n      <button className=\"btn btn-success mx-2 my-1\" onClick={speak}>Speak</button>\r\n      <button className=\"btn btn-success mx-2 my-1\" onClick={handleCopy}>Copy Text</button>\r\n      \r\n      <button className=\"btn btn-outline-danger mx-5 text-dark\" onClick={clearbtn}>Clear</button>\r\n    </div>\r\n    <div className='container' style={{color: props.mode==='dark'?'white':'black'}}>\r\n      <h2 className='my-2'>Your Text Summary</h2>\r\n      <small className='my-1'>{text.split(\" \").length - 1} word(s) and {text.length} character(s)</small>\r\n      <br />\r\n      <small className='my-1'>{0.008 * text.split(\" \").length} minutes will taken to read</small>\r\n      <h3 className='my-1'>Preview</h3>\r\n      <small>{text.length>0?text:\"Enter Something in the box to preview it here\"}</small>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import { useState } from 'react';\r\nimport './App.css';\r\nimport Alert from './components/Alert';\r\n// import About from './components/About';\r\nimport Navbar from './components/Navbar'\r\nimport TextForm from './components/TextForm';\r\nimport React from 'react'\r\n\r\n\r\nfunction App() {\r\n\r\n  //const [mode,setMode] = useState('light');//whether dark mode is enabled or not\r\n  // // const [toggleMode,setToggleMode] = useState('light')//whether dark mode is enabled or not\r\n\r\n  const toggleMode =()=>{\r\n    if (mode === 'light') {\r\n      setMode('dark');\r\n      document.body.style.backgroundColor = 'grey';\r\n    }\r\n    else{\r\n      setMode('light');\r\n      document.body.style.backgroundColor = 'white';\r\n    }\r\n  }  \r\n\r\n  const [mode, setMode] = useState('light');\r\n\r\n\r\n  const [alert,setAlert] = useState(null);\r\n\r\n const showAlert = (message,type)=>{\r\n    setAlert({\r\n      msg:message,\r\n      type:type\r\n    })\r\n\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 2000);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Navbar title=\"TextUtils\" toggleMode={toggleMode} mode={mode} ></Navbar>\r\n      <Alert alert={alert} />\r\n      <div className='container my-3'>\r\n        <TextForm showAlert={showAlert} heading =\"Enter a Text to Analyze\" mode={mode} />\r\n        {/* <About/> */}\r\n      </div>\r\n    </>\r\n    // <div>\r\n    //   {/* <Count/> */}\r\n    // </div>\r\n    \r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}